Содержание
==========

#. Первая программа на Python
#. Комментарии
#. Типы данных
#. Переменные

Первая программа на Python
""""""""""""""""""""""""""

Давайте не будем отрекатся от традиций и первой программой будет вывод "Hello World!" (листинг **1.0**)

Листинг **1.0**

::                       
                         
    print("Hello World!")

Вывод:
Hello World!

.. note::

    Фактически, каждая строка - это отдельная инструкция, объясняющая интепретатору что делать.

Если запустить двойным щелчком по файлу, то консоль сразу же закроется. Это происходит потому, что интепретатор
выполнив инструкцию ``print("Hello World!")`` не собирается ждать пока мы рассмотрим вывод, и так как код закончился
он закрывает окно. Есть два способа решения этой проблемы:

* Открыть через cmd (про этот способ читайте - здесь надо что-то вставить)
* Добавить строку ``input()``

Выберем второй вариант (Листинг **1.1**). ``input()`` заставляет интепретатора ждать нажатие Enter
Листинг **1.1**

::  

    print("Hello World!")
    input()

Если сейчас запустить двойным щелчком по файлу, то окно закроется после того как мы нажмём Enter.
Разберём код:

1. Используем функцию ``print`` и выводил значение "Hello World!"
2. С помощью функции ``input`` ждём пока пользователь нажмет какую нибудь клавишу.
3. Конец программы
   
Поэкспрементируйте, поставте несколько ``input()`` и напишите другое слово в ``print()`` (в кавычках)

.. important::

    Каждый листинг желеательно повторять и изменять, так вы лучше всё усвоите

Комментарии
"""""""""""

Комментарий - фрагмент кода, игнорируемый интепретатором. Тоесть это пояснения в код, помогающие программисту вспомнить предназначение кода.
Давайте комментарии в сложных местах, не стоит делать их в легких местах, где всё само собой понятно.

Пример:

::

    # Это комментарий
    Это не комментарий!

.. note::

    Комментарии можно давать и после инструкции

Типы данных
"""""""""""

В Python есть много типов данных, можно также создавать свои (но это уже совсем другая история) типы данных. Мы пока что рассмотрим три:

* str - строковой тип данных (заключается в "" или в '' кавычки). Например: "Hello World!" или 'Hello World!'
* int - числовой тип данных (просто число без кавычек). Например: 76, 122, 237
* float - число с **запятой** (в python вместо запятой точка). Например: 3.01, 544.12673

.. important::

    Не путайте число без точки (тип int) с числом с точкой (тип float)

Попробуем вывести разные типы данных (листинг **1.2**):

Листинг **1.2**

::                       

    print("Hello World!")
    print(213)
    print(3.5)
    input()

Разберём код:

1. Выводим тип str
2. Выводим тип int
3. Выводим тип float
4. С помощью функции ``input`` ждём пока пользователь нажмет какую нибудь клавишу.

Переменные
""""""""""

Переменная - слово, хранящия ссылку на значение. Переменные задаются так:

``a = "Hello World!"``

Здесь ``a`` - имя переменной. ``"Hello World!"`` - значение, на которые переменная ссылатся. Обратите внимание на именование переменных:

* имя переменной не должно начинатся с цифры
* в имени переменной недопустимо использование символов: !"'.@№#;$%:^?&*()/ и др.

Теперь, если в код добавить ``print(a)`` то выведет: ``"Hello World!"`` (листинг **1.3**)

Листинг **1.3**

::

    a = "Hello World!"
    print(a)

Вывод: Hello World!

Переменной можно присвоить любой тип данных, будь то str или float

.. warning::

    Не используйте переменную до её определения!
    
Пример использования переменных до её определения (листинг **1.4**)

Листинг **1.4**

::

    print(name) # Ошибка! Переменной name не существует!
    Traceback (most recent call last):
    File "<pyshell#0>", line 1, in <module>
        print(name) # Ошибка! Переменной name не существует!
    NameError: name 'name' is not defined

Здесь в конце вылезла ошибка, говорящая что: name 'name' is not defined - "имя 'name' не определено"